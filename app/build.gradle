plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-parcelize'
    id 'kotlin-kapt'

    id 'androidx.navigation.safeargs.kotlin'
    id 'dagger.hilt.android.plugin'
    id 'kotlinx-serialization'
}

apply {
    from("$project.rootDir/tools/spotless.gradle")
    from("$project.rootDir/dependencies.gradle")
}

android {
    compileSdkVersion appConf.compileSdk
    buildToolsVersion appConf.buildTools

    defaultConfig {
        applicationId appConf.appId
        versionCode appConf.versionCode
        versionName appConf.versionName

        minSdkVersion appConf.minSdk
        targetSdkVersion appConf.compileSdk
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        vectorDrawables.useSupportLibrary = true
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8.toString()
        freeCompilerArgs += [                                                                       // For Kotlin Coroutines Experiment Features
                "-Xuse-experimental=kotlinx.coroutines.ExperimentalCoroutinesApi",
                "-Xuse-experimental=kotlinx.coroutines.ObsoleteCoroutinesApi",
                "-Xuse-experimental=kotlinx.coroutines.FlowPreview"]
    }

    buildFeatures {
        dataBinding = true
    }

    lintOptions {
        abortOnError false
    }

}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])

    //Core
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk7:$versions.kotlin"){
        because("https://medium.com/@mbonnin/the-different-kotlin-stdlibs-explained-83d7c6bf293")
    }
    implementation "androidx.appcompat:appcompat:$versions.appcompat"
    implementation "androidx.core:core-ktx:$versions.ktxCore"
    implementation("androidx.fragment:fragment-ktx:$versions.ktxFragment"){
        because("To use extensions like : viewModels and activityViewModels etc.")
    }

    //Views and Layouts
    implementation "androidx.constraintlayout:constraintlayout:$versions.constraintLayout"
    implementation "androidx.swiperefreshlayout:swiperefreshlayout:$versions.swiperefreshlayout"
    implementation "com.google.android.material:material:$versions.material"

    implementation("com.jsibbold:zoomage:$versions.zoomage"){
        because("For Zoomable ImageView")
    }
    implementation("com.mlsdev.animatedrv:library:$versions.animatedRV"){
        because("For animated Recyclerview")
    }
    implementation("com.facebook.shimmer:shimmer:$versions.shimmer"){
        because("To show shimmer effect while loading data")
    }

    //Animation
    implementation("com.airbnb.android:lottie:$versions.lottie"){
        because("For Lottie files animation")
    }
    implementation("com.andkulikov:transitionseverywhere:$versions.transitionsEverywhere"){
        because("For some custom Transition Animations")
    }

    //Resources
    implementation("com.intuit.ssp:ssp-android:$versions.sdpSSP"){
        because("For Responsive UI, contains dimens (dp) files for multiple screen sizes")
    }
    implementation("com.intuit.sdp:sdp-android:$versions.sdpSSP"){
        because("For Responsive UI, contains dimens (sp) files for multiple screen sizes")
    }

    //Image processing
    implementation "com.github.bumptech.glide:glide:$versions.glide"
    kapt "com.github.bumptech.glide:compiler:$versions.glide"                                       // For custom GlideApp Module

    /* Dependency Injection Dependencies */
    implementation "com.google.dagger:dagger-android:$versions.dagger"                              // Dagger 2
    kapt "com.google.dagger:dagger-compiler:$versions.dagger"

    implementation "com.google.dagger:hilt-android:$versions.daggerHiltAndroidVersion"              // Dagger-Hilt For Android
    kapt "com.google.dagger:hilt-android-compiler:$versions.daggerHiltAndroidVersion"

    implementation "androidx.hilt:hilt-common:$versions.daggerHiltVersion"                          // Hilt
    kapt "androidx.hilt:hilt-compiler:$versions.daggerHiltVersion"

    implementation("androidx.hilt:hilt-lifecycle-viewmodel:$versions.daggerHiltVersion"){
        because("Hilt Jetpack integrations of ViewModel")
    }
    /* Dependency Injection Dependencies Ends*/

    /* Android JetPack Modules */

    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$versions.lifecycle"                 // ViewModel and LiveData
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$versions.lifecycle"
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:$versions.lifecycle"
    implementation "androidx.lifecycle:lifecycle-viewmodel-savedstate:$versions.lifecycle"
    implementation "androidx.lifecycle:lifecycle-process:$versions.lifecycle"

    implementation "androidx.navigation:navigation-runtime-ktx:$versions.navigation"                // Navigation Arch
    implementation "androidx.navigation:navigation-fragment-ktx:$versions.navigation"
    implementation "androidx.navigation:navigation-ui-ktx:$versions.navigation"

    /*  Android JetPack Modules Ends */


    // Kotlin Coroutines
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$versions.coroutines"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$versions.coroutines"

    // Json Parsing
    implementation "org.jetbrains.kotlinx:kotlinx-serialization-json:$versions.kotlinxSerialization"

    // Logging
    implementation "com.jakewharton.timber:timber:$versions.timber"

    // Testing
    testImplementation "junit:junit:$versions.junit"
    androidTestImplementation "androidx.test.ext:junit:$versions.junitExt"
    androidTestImplementation "androidx.test.espresso:espresso-core:$versions.espressoCore"
}